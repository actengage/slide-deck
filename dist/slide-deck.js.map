{"version":3,"file":"slide-deck.js","sources":["../src/Slide.vue","../src/SlideDeck.vue","../src/SlideDeckControls.vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport { onMounted, VNode } from 'vue';\n\nconst props = defineProps<{\n    node?: VNode\n}>();\n\nonMounted(() => {\n    node?.el?.dispatchEvent(new Event('enter'));\n});\n</script>\n\n<script lang=\"ts\">\nlet node = $ref<VNode>();\n</script>\n\n<template>\n    <div class=\"slide-deck-slide\">\n        <component\n            :is=\"props.node\"\n            ref=\"node\" />\n    </div>\n</template>","<script lang=\"ts\">\nimport { defineComponent, VNode } from 'vue';\nimport Slide from './Slide.vue';\n// import SlideDeckControls from './SlideDeckControls.vue';\n\nexport default defineComponent({\n\n    components: {\n        Slide,\n        // SlideDeckControls\n    },\n\n    props: {\n\n        /**\n         * Additional attributes to be passed to the slots.\n         */\n        attrs: {\n            type: Object,\n            default: () => ({})\n        },\n\n        /**\n         * The slide key or index that should show.\n         */\n        active: {\n            type: Number,\n            default: 0\n        },\n\n        /**\n         * Automatically resize the height of the slide so it animates from one\n         * slide to the next.\n         */\n        autoResize: {\n            type: Boolean,\n            default: true\n        },\n\n        /**\n         * Show the slide-deck controls to change the slide.\n         */\n        controls: Boolean,\n\n        /**\n         * Additional props to be passed to the slots.\n         */\n        props: {\n            type: Object,\n            default: () => ({})\n        },\n\n        /**\n         * Pass the slots as a prop instead of using <slot />.\n         */\n        slots: {\n            type: Array,\n            default: undefined\n        }\n    },\n\n    emits: [\n        'before-enter',\n        'enter',\n        'after-enter',\n        'before-leave',\n        'leave',\n        'after-leave'\n    ],\n\n    data() {\n        return {\n            currentActive: this.active,\n            direction: 'forward',\n            maxHeight: undefined,\n            mounted: false,\n            lastSlide: null,\n            sliding: false,\n        };\n    },\n    \n    watch: {\n\n        currentActive(value: number, oldValue: number): void {\n            this.lastSlide = oldValue;\n            this.direction = (\n                this.findIndex(oldValue) > this.findIndex(value)\n            ) ? 'backward' : 'forward';\n        }\n    },\n    \n    mounted(): void {\n        this.$nextTick(() => {\n            this.mounted = true;\n            this.$emit('enter', this.slot());\n        });\n    },\n\n    methods: {\n\n        findIndex(key: string|number): number {\n            return this.vnodes().findIndex((vnode: VNode, i: number) => {\n                if(vnode.key === key) {\n                    return true;\n                }\n                \n                if(i === key) {\n                    return true;\n                }\n\n                return false;\n            });\n        },\n\n        find(key: string|number): VNode|undefined {\n            return this.vnodes()[this.findIndex(key)];\n        },\n\n        first(): void {\n            this.goto(0);\n        },\n\n        last(): void {\n            this.goto(this.vnodes().length - 1);\n        },\n\n        goto(key: number): void {\n            if(!this.sliding) {\n                this.currentActive = Math.max(0, key);\n            }\n        },\n\n        next(): void {\n            if(!this.sliding) {\n                this.currentActive = Math.min(\n                    this.findIndex(this.currentActive) + 1, this.vnodes().length - 1\n                );\n            }\n        },\n\n        prev(): void {\n            if(!this.sliding) {\n                this.currentActive = Math.max(\n                    this.findIndex(this.currentActive) - 1, 0\n                );\n            }\n        },\n\n        resize(el: HTMLElement): void {\n            const height = getComputedStyle(el).height;\n\n            this.maxHeight = height === '0x'\n                ? this.maxHeight\n                : height;\n        },\n        \n        slot(): VNode {\n            return this.find(this.currentActive);\n        },\n\n        vnodes(): VNode[] {\n            return (this.slots || this.$slots.default(this))\n                .map((slot: VNode, key: number) => {\n                    slot.props = Object.assign(\n                        {}, slot.props, this.props, this.attrs\n                    );                                        \n                                        \n                    return Object.assign(slot, {\n                        key\n                    });\n                });\n        },\n\n        onClickControl(e: Event, vnode: VNode): void {\n            if(!this.sliding) {\n                this.goto(vnode);\n            }\n        },\n\n        onBeforeLeave(el: HTMLElement): void {\n            this.autoResize && this.resize(el);\n            this.$emit(\n                'before-leave',\n                this.slot(),\n                this.find(this.lastSlide)\n            );\n        },\n\n        onBeforeEnter(): void {\n            this.sliding = true;\n            this.$emit(\n                'before-enter',\n                this.slot(),\n                this.find(this.lastSlide)\n            );\n        },\n\n        onEnter(el: HTMLElement): void {\n            this.$nextTick(() => {\n                this.autoResize && this.resize(el);\n                this.$emit(\n                    'enter',\n                    this.slot(),\n                    this.find(this.lastSlide)\n                );\n            });\n        },\n\n        onAfterEnter(): void {\n            this.$emit(\n                'after-enter',\n                this.slot(),\n                this.find(this.lastSlide)\n            );\n        },\n\n        onLeave(): void {\n            this.$emit(\n                'leave',\n                this.slot(),\n                this.find(this.lastSlide)\n            );\n        },\n\n        onAfterLeave(): void {\n            this.sliding = false;\n\n            this.$nextTick(() => {\n                this.maxHeight = null;\n                this.$emit(\n                    'after-leave',\n                    this.slot(),\n                    this.find(this.lastSlide)\n                );\n            });\n        }\n\n    }\n\n});\n</script>\n\n<template>\n    <div\n        class=\"slide-deck\"\n        :class=\"{ sliding }\">\n        <slot\n            name=\"top\"\n            :active=\"currentActive\" />\n        <div\n            ref=\"content\"\n            class=\"slide-deck-content\"\n            :class=\"{ [direction]: true }\"\n            :style=\"{ maxHeight }\">\n            <transition\n                :name=\"`slide-${direction}`\"\n                @before-enter=\"onBeforeEnter\"\n                @enter=\"onEnter\"\n                @after-enter=\"onAfterEnter\"\n                @before-leave=\"onBeforeLeave\"\n                @leave=\"onLeave\"\n                @after-leave=\"onAfterLeave\">\n                <keep-alive>\n                    <slide\n                        ref=\"slide\"\n                        :key=\"currentActive\"\n                        :node=\"find(currentActive)\" />\n                </keep-alive>\n            </transition>\n        </div>\n        <slot\n            name=\"middle\"\n            :active=\"currentActive\" />\n        <!-- <slot\n            name=\"controls\"\n            :active=\"currentActive\">\n            <slide-deck-controls\n                v-if=\"controls && mounted\"\n                ref=\"controls\"\n                :slots=\"slots()\"\n                :active=\"currentActive\"\n                @click=\"onClickControl\">\n                <template #default=\"context\">\n                    <slot\n                        name=\"bullet\"\n                        v-bind=\"context\" />\n                </template>\n            </slide-deck-controls>\n        </slot> -->\n        <slot\n            name=\"bottom\"\n            :active=\"currentActive\" />\n    </div>\n</template>\n\n<style>\n.slide-deck {\n    height: auto;\n    position: relative;\n}\n\n.slide-deck.sliding {\n    overflow: hidden;\n}\n\n.slide-deck .slide-deck-content {\n    display: flex;\n    flex-wrap: nowrap;\n    transition-property: max-height;\n    transition-duration: 250ms;\n    transition-timing-function: ease-in-out;\n}\n\n.slide-deck .slide-deck-content.forward {\n    flex-direction: row;\n}\n\n.slide-deck .slide-deck-content.backward {\n    flex-direction: row-reverse;\n}\n\n.slide-deck .slide-deck-slide {\n    width: 100%;\n    flex-shrink: 0;\n    align-self: flex-start;\n}\n\n.slide-forward-leave-active,\n.slide-forward-enter-active,\n.slide-backward-leave-active,\n.slide-backward-enter-active {\n    transition: all 250ms ease-in-out;\n}\n\n.slide-deck .slide-forward-enter-to,\n.slide-deck .slide-forward-leave-to { \n    transform: translateX(-100%);\n}\n\n.slide-deck .slide-backward-enter-to,\n.slide-deck .slide-backward-leave-to { \n    transform: translateX(100%);\n}\n</style>\n","<script lang=\"ts\">\nimport type { VNode } from 'vue';\n\nexport default {\n\n    props: {\n\n        /**\n         * The active key or index that should show.\n         *\n         * @type {Number}\n         */\n        active: {\n            type: Number,\n            default: 0\n        },\n\n        /**\n         * An array of vnodes.\n         *\n         * @type {Array}\n         */\n        slots: {\n            type: Array,\n            required: true\n        }\n\n    },\n\n    computed: {\n        context() {\n            return this;\n        }\n    },\n\n    methods: {\n\n        isActive(vnode: VNode, i: number) {\n            if(vnode.key === this.active) {\n                return true;\n            }\n            \n            if(i === this.active) {\n                return true;\n            }\n\n            return false;\n        },\n\n        onClick(event: Event, slide: VNode) {\n            this.$emit('click', event, slide);\n        }\n\n    }\n\n};\n</script>\n\n<template>\n    <div class=\"slide-deck-controls\">\n        <a\n            href=\"#\"\n            class=\"slide-deck-control-icon\"\n            :class=\"{'is-active': isActive(slide, active)}\"\n            @click.prevent=\"onClick($event, slide)\">\n            <slot v-bind=\"Object.assign({ slide, active }, context)\">&bull;</slot>\n        </a>\n    </div>\n</template>\n\n<style>\n.slide-deck-controls {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: currentColor;\n}\n\n.slide-deck-controls.absolute {\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n}\n\n.slide-deck-controls .slide-deck-control-icon {\n    font-size: 2em;\n    padding: .25em .15em;\n}\n\n.slide-deck-controls > a:hover {\n    text-decoration: none;\n}\n\n.slide-deck-controls :not(:last-child) {\n    margin-right: .5rem;\n}\n\n.slide-deck-controls .slide-deck-control-icon.is-active {\n    color: #007bff;\n}\n</style>\n"],"names":["node","_ref","onMounted","_b","_a","_sfc_main$1","defineComponent","Slide","value","oldValue","key","vnode","el","height","slot","_resolveComponent","_normalizeClass","_ctx","_renderSlot","_createElementVNode","_normalizeStyle","_Transition","_withCtx","_openBlock","_createBlock","_KeepAlive","_component_slide","_sfc_main","i","event","slide","_sfc_render","_cache","$props","$setup","$data","$options","_createElementBlock","_hoisted_1","_withModifiers","$event"],"mappings":"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"}